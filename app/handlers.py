from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import app.keybords as kb
import database.requests as rq

from translations import _, get_lang
import requests 


router = Router()
     
@router.message((F.text == 'üè¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') | (F.text == 'üè¶ Statistics'))
async def get_stats(message: Message):
    await message.answer(get_messageStats(), reply_markup=kb.mainIn(await get_lang(message.from_user.id)), parse_mode='html')
    
@router.callback_query(F.data == 'updateStats')
async def update_stats(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(get_messageStats(), reply_markup=kb.mainIn(await get_lang(callback.from_user.id)), parse_mode='html')
    
@router.callback_query(F.data == 'listcrypto')
async def get_cryptoList(callback: CallbackQuery):
    await callback.answer('')
    cryptocurrencies = {
    "Bitcoin": "BTC",
    "Ethereum": "ETH",
    "Solona": "SOL",
    "First Digital USD": "FDUSD",
    "USD Coin": "USDC",
    "Pepe": "PEPE",
    "Binance Coin": "BNB",
    "XRP": "XRP",
    "Dogecoin": "DOGE",
    "Tether": "USDT"
}

    result = ""
    for currency, symbol in cryptocurrencies.items():
        result += f"<b>{currency}</b>({symbol})\n"
    await callback.message.answer(result,reply_markup=kb.backStatsIn , parse_mode='html')

        
@router.callback_query(F.data == 'backStatsFull')
async def back_statsFull(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(get_messageStats(), reply_markup=kb.mainIn(lang(callback.from_user.id)), parse_mode='html')



@router.message((F.text == 'üíº –ü—Ä–æ—Ñ–∏–ª—å') | (F.text == 'üíº Profile'))
async def get_statsProfil(message: Message):
    user = await rq.get_user(message.from_user.id)
    await message.answer(_(get_profilStats(), user.language).format(message.from_user.full_name, premiumStatus(user.premium), user.registr_date), reply_markup=kb.profileIn(await get_lang(message.from_user.id)), parse_mode='html')

@router.callback_query(F.data == 'settings')
async def settings(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(text='‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>', reply_markup=kb.settingsIn, parse_mode='html')
    
@router.callback_query(F.data == 'setLang')
async def settings(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>', reply_markup=kb.languagesIn, parse_mode='html')
    
@router.callback_query(F.data.startswith('lang_'))
async def set_language(callback: CallbackQuery):
    await callback.answer('')
    lang = callback.data[5:]
    await rq.set_lang(callback.from_user.id, lang)
    if lang == 'ru':
        message_text = '<b>–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>'
    else:
        message_text = '<b>English language is set.</b>'
    
    await callback.message.answer(text=message_text, reply_markup=kb.mainRp(lang), parse_mode='html') 
    
@router.callback_query(F.data == 'backProfil')
async def back_Profil(callback: CallbackQuery):
    await callback.answer('')
    user = await rq.get_user(callback.from_user.id)
    await callback.message.answer(_(get_profilStats(), user.language).format(callback.message.from_user.full_name, premiumStatus(user.premium), user.registr_date), reply_markup=kb.profileIn(await get_lang(callback.message.from_user.id)), parse_mode='html')

  
@router.callback_query(F.data == 'help')
async def support(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(text='/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/setting - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n/help –ü–æ–º–æ—â—å\n\nhttps://t.me/AntonBog123', reply_markup=kb.backProfilIn)
  
  
  
  
       
@router.message((F.text == 'üìï –û —Å–µ—Ä–≤–∏—Å–µ') | (F.text == 'üìï About the Service'))
async def get_info(message: Message):
    photo = FSInputFile('Images/photoInfo.jpeg')
    await message.answer_photo(photo=photo, caption='<b>–î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Ä—ã–Ω–∫–µ, –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–¥–æ–±–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã - –≤—Å–µ —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä—è–º–æ –≤ Telegram. –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —Å–µ—Ä–≤–∏—Å—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.</b>', parse_mode='html')
    
    
    
    
    
    
@router.message((F.text == 'üëë –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª') | (F.text == 'üëë Premium Functionality'))
async def premium_func(message: Message):
    user = await rq.get_user(message.from_user.id)
    if(user.premium == True):
        await message.answer('üëë <b>–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</b>', reply_markup=kb.premiumIn, parse_mode='html')
    else:
        await message.answer('–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º', reply_markup=kb.premiumBuyIn)
       
@router.callback_query(F.data == 'buyPremium')
async def buy_premium(callback: CallbackQuery):
    await callback.answer('')
    user = await rq.get_user(callback.from_user.id)
    if(user.premium == True):
        await callback.message.answer(text='–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å.')
    else:
        await rq.update_user_premium_status(callback.from_user.id)
        await callback.message.answer(text='–ü—Ä–µ–º–∏—É–º –∫—É–ø–ª–µ–Ω!')
    


            
@router.callback_query(F.data == 'backPremium')
async def backPremium(callback: CallbackQuery):
    await callback.answer('')
    user = await rq.get_user(callback.from_user.id)
    if(user.premium == True):
        await callback.message.answer('üëë <b>–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</b>', reply_markup=kb.premiumIn, parse_mode='html')
    else:
        await callback.message.answer('–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º', reply_markup=kb.premiumBuyIn)
    
    
def get_profilStats():
    return '<b>–õ–æ–≥–∏–Ω:</b> {}\n<b>–°—Ç–∞—Ç—É—Å:</b> {}\n<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {}'

    
def get_messageStats():
    
    cryptocurrencies = ["BTC", "ETH", "USDT", "BNB", "SOL"]
    fsyms = ','.join(cryptocurrencies)

    url = f'https://min-api.cryptocompare.com/data/pricemultifull?fsyms={fsyms}&tsyms=USD'
    r = requests.get(url)
    json_data = r.json()

    messageStats_text = "üè¶<b>CryptoStats</b>\n\n"

    for currency in cryptocurrencies:
        price = round(json_data["RAW"][currency]["USD"]["PRICE"],5)
        change24h =  round(json_data["RAW"][currency]["USD"]["CHANGEPCT24HOUR"],5)
        
        messageStats_text += f"<b>{currency}:=</b><i>{price}$</i>, <b>24h:</b> <i>{change24h}%</i>\n"
    return messageStats_text

def premiumStatus(premium: bool):
    if(premium == False):    
        return '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
    return '–ü—Ä–µ–º–∏—É–º'









