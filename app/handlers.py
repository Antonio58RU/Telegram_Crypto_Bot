from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import asyncio

import app.keybords as kb
import database.requests as rq


import requests 


router = Router()

class StatsFullSt(StatesGroup):
    nameCrypto = State()
    
class CalculatorSt(StatesGroup):
    name_and_amount = State()
 

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await rq.set_user(message.from_user.id)
    await message.answer('@cryptostats58_bot: –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Ü–µ–Ω, –ø–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫—Ä–∏–ø—Ç—ã –ø—Ä—è–º–æ –≤ Telegram.', reply_markup=kb.mainRp)
    await state.clear()
     
@router.message(F.text == 'üè¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Binance')
async def get_stats(message: Message):
    await message.answer(get_messageStats(), reply_markup=kb.mainIn, parse_mode='html')
    
@router.callback_query(F.data == 'updateStats')
async def update_stats(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(get_messageStats(), reply_markup=kb.mainIn, parse_mode='html')
    
@router.callback_query(F.data == 'getStatsFull')
async def get_statsFull(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(StatsFullSt.nameCrypto)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ—ë –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.', parse_mode='html')
    
@router.message(StatsFullSt.nameCrypto)
async def StatsFull_stats(message: Message, state: FSMContext):
    await state.update_data(nameCrypto = message.text)
    data = await state.get_data()
    await message.answer_photo(photo=f'https://images.cryptocompare.com/sparkchart/{data['nameCrypto']}/USD/latest.png?ts=1713464400', caption=get_messageStatsFull(data), reply_markup=kb.statsFullIn, parse_mode='html')
    await state.clear()
 
@router.callback_query(F.data == 'calculator')
async def get_nameCrypto(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(CalculatorSt.name_and_amount)
    await callback.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –µ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n—á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª "-"</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä - "BNB-3.54".', parse_mode='html')
    
@router.message(CalculatorSt.name_and_amount)
async def get_nameCrypto_two(message: Message, state: FSMContext):
    await state.update_data(name_and_amount = message.text)
    data = await state.get_data()
    crypto_name, crypto_value = data['name_and_amount'].split('-')
    
    r = requests.get(f'https://min-api.cryptocompare.com/data/pricemultifull?fsyms={crypto_name}&tsyms=USD')
    json_data = r.json()
    try:
        price = json_data["RAW"][crypto_name]["USD"]["PRICE"]
    except KeyError:  
        await message.answer(text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ1') 
        #asyncio.run(get_nameCrypto)
    
    try:
        crypto_value = float(crypto_value)
    except ValueError:  
        await message.answer(text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ2') 
        
    
    await message.answer(f'‚å®Ô∏è <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n\n–¶–µ–Ω–∞ {crypto_name}: {crypto_value} = {round(crypto_value * float(price),5)}$', parse_mode='html', reply_markup=kb.calculatorIn)
    await state.clear()
        
@router.callback_query(F.data == 'backStatsFull')
async def back_statsFull(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(get_messageStats(), reply_markup=kb.mainIn, parse_mode='html')







@router.message(F.text == 'üíº –ü—Ä–æ—Ñ–∏–ª—å')
async def get_statsProfil(message: Message):
    user = await rq.get_user(message.from_user.id)
    await message.answer(f'<b>–õ–æ–≥–∏–Ω:</b> {message.from_user.full_name}\n<b>–°—Ç–∞—Ç—É—Å:</b> {premiumStatus(user.premium)}\n<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {user.registr_date}', reply_markup=kb.profileIn, parse_mode='html')

@router.callback_query(F.data == 'settings')
async def settings(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(text='‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>', reply_markup=kb.settingsIn, parse_mode='html')
    
@router.callback_query(F.data == 'setLang')
async def settings(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>', reply_markup=kb.languagesIn, parse_mode='html')
 
@router.callback_query(F.data == 'backProfil')
async def back_Profil(callback: CallbackQuery):
    await callback.answer('')
    user1 = await rq.get_user(callback.from_user.id)
    await callback.message.edit_text(f'<b>–õ–æ–≥–∏–Ω:</b> {callback.from_user.full_name}\n<b>–°—Ç–∞—Ç—É—Å:</b> {premiumStatus(user1.premium)}\n<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {user1.registr_date}', reply_markup=kb.profileIn, parse_mode='html')

     
     
     
@router.callback_query(F.data == 'help')
async def support(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(text='/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/setting - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n/help –ü–æ–º–æ—â—å\n\nhttps://t.me/AntonBog123', reply_markup=kb.backProfilIn)
  
  
  
  
       
@router.message(F.text == 'üìï –û —Å–µ—Ä–≤–∏—Å–µ')
async def get_info(message: Message):
    photo = FSInputFile('Images/photoInfo.jpeg')
    await message.answer_photo(photo=photo, caption='<b>–î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Ä—ã–Ω–∫–µ, –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–¥–æ–±–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã - –≤—Å–µ —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä—è–º–æ –≤ Telegram. –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —Å–µ—Ä–≤–∏—Å—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.</b>', parse_mode='html')
    
    
    
    
    
    
@router.message(F.text == 'üëë –ü–æ–ª—É—á–∏—Ç—å Vip')
async def get_vip(message: Message):
    await rq.update_user_premium_status(message.from_user.id)
    await message.answer('–¢—ã –ø—Ä–µ–º–∏—É–º!')
       
    
 
    
    
    
    
def get_messageStats():
    
    cryptocurrencies = ["BTC", "ETH", "USDT", "BNB", "SOL", "USDC", "STETH", "XRP", "DOGE", "TON"]
    fsyms = ','.join(cryptocurrencies)

    url = f'https://min-api.cryptocompare.com/data/pricemultifull?fsyms={fsyms}&tsyms=USD'
    r = requests.get(url)
    json_data = r.json()

    messageStats_text = "üè¶<b>CryptoStats</b>\n\n"

    for currency in cryptocurrencies:
        price = round(json_data["RAW"][currency]["USD"]["PRICE"],5)
        change24h =  round(json_data["RAW"][currency]["USD"]["CHANGEPCT24HOUR"],5)
        
        messageStats_text += f"<b>{currency}:=</b><i>{price}$</i>, <b>24h:</b> <i>{change24h}%</i>\n"
    return messageStats_text

def get_messageStatsFull(data):
    nameCrypto = data['nameCrypto']
    
    r = requests.get(f'https://min-api.cryptocompare.com/data/pricemultifull?fsyms={nameCrypto}&tsyms=USD')
    json_data = r.json()

    fromsymbol = json_data["RAW"][nameCrypto]["USD"]["FROMSYMBOL"]
    market = json_data["RAW"][nameCrypto]["USD"]["MARKET"]
    price = json_data["RAW"][nameCrypto]["USD"]["PRICE"]
    change24h = json_data["RAW"][nameCrypto]["USD"]["CHANGEPCT24HOUR"]
    
    messageStatsFull_text = f'<b>–ì—Ä–∞—Ñ–∏–∫ –∑–∞ 7 –¥–Ω–µ–π</b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{fromsymbol}\n<b>–ú–∞—Ä–∫–µ—Ç: </b>{market}\n<b>–¶–µ–Ω–∞: </b>{round(price, 2)}$\n<b>24—á: </b>{change24h}'
    return messageStatsFull_text

def premiumStatus(premium: bool):
    if(premium == False):    
        return '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
    return 'Premium'
