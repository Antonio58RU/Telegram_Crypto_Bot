from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

import app.keybords as kb
import database.requests as rq

from translations import _
import requests 


router = Router()
     
@router.message((F.text == 'üè¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') | (F.text == 'üè¶ Statistics'))
@router.callback_query(F.data == 'updateStats')
async def handle_stats(message_or_callback, state: FSMContext):
    if isinstance(message_or_callback, Message):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.clear()
        message = message_or_callback
        # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        lang = await rq.get_localization(message.from_user.id)
        await message.answer(get_messageStats(), reply_markup=kb.mainIn(lang), parse_mode='html')
    elif isinstance(message_or_callback, CallbackQuery):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞
        callback = message_or_callback
        # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–±—ç–∫–∞
        await callback.answer('')
        lang = await rq.get_localization(callback.from_user.id)
        await callback.message.edit_text(get_messageStats(), reply_markup=kb.mainIn(lang), parse_mode='html')

@router.callback_query(F.data == 'listcrypto')
async def get_cryptoList(callback: CallbackQuery):
    await callback.answer('')
    cryptocurrencies = {
    "Bitcoin": "BTC",
    "Ethereum": "ETH",
    "Solona": "SOL",
    "First Digital USD": "FDUSD",
    "USD Coin": "USDC",
    "Pepe": "PEPE",
    "Binance Coin": "BNB",
    "XRP": "XRP",
    "Dogecoin": "DOGE",
    "Tether": "USDT"
}

    result = ""
    lang = await rq.get_localization(callback.from_user.id)
    for currency, symbol in cryptocurrencies.items():
        result += f"<b>{currency}</b>({symbol})\n"
    await callback.message.answer(result,reply_markup=kb.backStatsIn(lang) , parse_mode='html')
       
@router.callback_query(F.data == 'backStatsFull')
async def back_statsFull(callback: CallbackQuery):
    await callback.answer('')
    lang = await rq.get_localization(callback.from_user.id) 
    await callback.message.answer(get_messageStats(), reply_markup=kb.mainIn(lang), parse_mode='html')

@router.message((F.text == 'üíº –ü—Ä–æ—Ñ–∏–ª—å') | (F.text == 'üíº Profile'))
async def get_statsProfil(message: Message, state: FSMContext):
    await state.clear()
    user = await rq.get_user(message.from_user.id)
    await message.answer(_(get_profilStats(), user.language).format(message.from_user.full_name, _(premiumStatus(user.premium), user.language), user.registr_date), reply_markup=kb.profileIn(user.language), parse_mode='html')

@router.callback_query(F.data == 'settings')
async def settings(callback: CallbackQuery):
    await callback.answer('')
    lang = await rq.get_localization(callback.from_user.id) 
    await callback.message.answer(text=_('‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>', lang), reply_markup=kb.settingsIn(lang), parse_mode='html')
    
@router.callback_query(F.data == 'setLang')
async def settings(callback: CallbackQuery):
    await callback.answer('')
    lang = await rq.get_localization(callback.from_user.id) 
    await callback.message.answer(text=_('<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>', lang), reply_markup=kb.languagesIn, parse_mode='html')
    
@router.callback_query(F.data.startswith('lang_'))
async def set_language(callback: CallbackQuery):
    await callback.answer('')
    lang = callback.data[5:]
    await rq.set_lang(callback.from_user.id, lang)
 
    message_text = _('<b>–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>', lang)
    
    await callback.message.answer(text=message_text, reply_markup=kb.mainRp(lang), parse_mode='html') 
    
@router.callback_query(F.data == 'backProfil')
async def back_Profil(callback: CallbackQuery):
    await callback.answer('')
    user = await rq.get_user(callback.from_user.id)
    await callback.message.answer(_(get_profilStats(), user.language).format(callback.from_user.full_name, _(premiumStatus(user.premium), user.language), user.registr_date), reply_markup=kb.profileIn(user.language), parse_mode='html')
 
@router.callback_query(F.data == 'help')
async def support(callback: CallbackQuery):
    await callback.answer('')
    lang = await rq.get_localization(callback.from_user.id) 
    await callback.message.answer(text=_('/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n/help –ü–æ–º–æ—â—å\n\nhttps://t.me/AntonBog123', lang), reply_markup=kb.backProfilIn(lang))
        
@router.message((F.text == 'üìï –û —Å–µ—Ä–≤–∏—Å–µ') | (F.text == 'üìï About the Service'))
async def get_info(message: Message, state: FSMContext):
    await state.clear()
    photo = FSInputFile('Images/photoInfo.jpeg')
    
    text = "<b>–ù–∞—à —Å–µ—Ä–≤–∏—Å –¥–∞–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–¥–æ–±–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç - –≤—Å–µ —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä—è–º–æ –≤ Telegram. \n\n–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n \n- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.\n- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º.\n- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n–ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n\n- –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∑–∞ 7 –¥–Ω–µ–π –∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω.\n- –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É.\n- –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —Å –æ–±—É—á–∞—é—â–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.</b>"
    lang = await rq.get_localization(message.from_user.id) 
    await message.answer_photo(photo=photo, caption=_(text, lang), parse_mode='html')
  
@router.message((F.text == 'üëë –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª') | (F.text == 'üëë Premium Functionality'))
async def premium_func(message: Message, state: FSMContext):
    await state.clear()
    user = await rq.get_user(message.from_user.id)
    if(user.premium == True):
        await message.answer(_('üëë <b>–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</b>', user.language), reply_markup=kb.premiumIn(user.language), parse_mode='html')
    else:
        await message.answer(_('–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º', user.language), reply_markup=kb.premiumBuyIn(user.language))
       
@router.callback_query(F.data == 'buyPremium')
async def buy_premium(callback: CallbackQuery):
    await callback.answer('')
    user = await rq.get_user(callback.from_user.id)
    if(user.premium == True):
        await callback.message.answer(text=_('–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å.', user.language))
    else:
        await rq.update_user_premium_status(callback.from_user.id)
        await callback.message.answer(text=_('–ü—Ä–µ–º–∏—É–º –∫—É–ø–ª–µ–Ω!', await user.language))
             
@router.callback_query(F.data == 'backPremium')
async def backPremium(callback: CallbackQuery):
    await callback.answer('')
    user = await rq.get_user(callback.from_user.id)
    if(user.premium == True):
        await callback.message.answer(_('üëë <b>–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</b>', user.language), reply_markup=kb.premiumIn(user.language), parse_mode='html')
    else:
        await callback.message.answer(_('–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º', user.language), reply_markup=kb.premiumBuyIn(user.language))
    
    
def get_profilStats():
    return '<b>–õ–æ–≥–∏–Ω:</b> {}\n<b>–°—Ç–∞—Ç—É—Å:</b> {}\n<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {}'
   
def get_messageStats():
    
    cryptocurrencies = ["BTC", "ETH", "USDT", "BNB", "SOL"]
    fsyms = ','.join(cryptocurrencies)

    url = f'https://min-api.cryptocompare.com/data/pricemultifull?fsyms={fsyms}&tsyms=USD'
    r = requests.get(url)
    json_data = r.json()

    messageStats_text = "üè¶<b>CryptoStats</b>\n\n"

    for currency in cryptocurrencies:
        price = round(json_data["RAW"][currency]["USD"]["PRICE"],5)
        change24h =  round(json_data["RAW"][currency]["USD"]["CHANGEPCT24HOUR"],5)
        
        messageStats_text += f"<b>{currency}:=</b><i>{price}$</i>, <b>24h:</b> <i>{change24h}%</i>\n"
    return messageStats_text

def premiumStatus(premium: bool):
    if(premium == False):    
        return '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
    return '–ü—Ä–µ–º–∏—É–º'









