from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import app.keybords as kb

import requests 

cryptocurrencies = ["BTC", "ETH", "USDT", "BNB", "SOL"]
prices = {}
changes24h = {}

router = Router()

class StatsFull(StatesGroup):
    nameCrypto = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('@cryptostats58_bot: –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Ü–µ–Ω, –ø–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫—Ä–∏–ø—Ç—ã –ø—Ä—è–º–æ –≤ Telegram.', reply_markup=kb.mainRp)
      
@router.message(F.text == 'üè¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Binance')
async def get_stats(message: Message):
    await message.answer(get_messageStats(), reply_markup=kb.mainIn, parse_mode='html')
    
@router.callback_query(F.data == 'updateStats')
async def update_stats(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(get_messageStats(), reply_markup=await kb.mainIn, parse_mode='html')
    
@router.callback_query(F.data == 'getStatsFull')
async def get_statsFull(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(StatsFull.nameCrypto)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ—ë –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.', parse_mode='html')
    
@router.message(StatsFull.nameCrypto)
async def StatsFull_stats(message: Message, state: FSMContext):
    await state.update_data(nameCrypto = message.text)
    data = await state.get_data()
    await message.answer_photo(photo=f'https://images.cryptocompare.com/sparkchart/{data['nameCrypto']}/USD/latest.png?ts=1713464400', caption=get_messageStatsFull(data), reply_markup=await kb.statsFullIn, parse_mode='html')
    await state.clear()
    
@router.callback_query(F.data == 'backStatsFull')
async def back_statsFull(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(get_messageStats(), reply_markup=await kb.mainIn, parse_mode='html')

@router.message(F.text == 'üíº –ü—Ä–æ—Ñ–∏–ª—å')
async def get_statsProfil(message: Message):
    await message.answer(f'<b>–õ–æ–≥–∏–Ω:</b> {message.from_user.full_name}\n<b>–°—Ç–∞—Ç—É—Å:</b> Vip\n<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> 01-01-1888', reply_markup=await kb.profileIn, parse_mode='html')

@router.callback_query(F.data == 'settings')
async def settings(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>', reply_markup=await kb.langIn, parse_mode='html')
     
@router.callback_query(F.data == 'support')
async def support(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(text='https://t.me/AntonBog123')
       
@router.message(F.text == 'üìï –û —Å–µ—Ä–≤–∏—Å–µ')
async def get_info(message: Message):
    photo = FSInputFile('Images/photoInfo.jpeg')
    await message.answer_photo(photo=photo, caption='<b>–î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Ä—ã–Ω–∫–µ, –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–¥–æ–±–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã - –≤—Å–µ —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä—è–º–æ –≤ Telegram. –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —Å–µ—Ä–≤–∏—Å—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.</b>', parse_mode='html')
    
@router.message(F.text == 'üëë –ü–æ–ª—É—á–∏—Ç—å Vip')
async def get_vip(message: Message):
    await message.answer('–¢–´ –í–ò–ü!')
       
    
 
    
def get_messageStats():
    r = requests.get('https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC,ETH,USDT,BNB,SOL&tsyms=USD')
    json_data = r.json()

    for currency in cryptocurrencies:
        price = json_data["RAW"][currency]["USD"]["PRICE"]
        prices[currency] = round(price, 2)
        
    for currency in cryptocurrencies:
        change24h = json_data["RAW"][currency]["USD"]["CHANGEPCT24HOUR"]
        changes24h[currency] = round(change24h, 2)
        
    messageStats_text = f"üè¶<b>CryptoStats</b>\n\n<b>BTC:=</b><i>{prices['BTC']}$</i>, <b>24h:</b> <i>{changes24h['BTC']}%</i>\n<b>ETH:=</b><i>{prices['ETH']}$</i>, <b>24h:</b> <i>{changes24h['ETH']}%</i>\n<b>USDT:=</b><i>{prices['USDT']}$</i>, <b>24h:</b> <i>{changes24h['USDT']}%</i>\n<b>BNB:=</b><i>{prices['BNB']}$</i>, <b>24h:</b> <i>{changes24h['BNB']}%</i>\n<b>SOL:=</b><i>{prices['SOL']}$</i>, <b>24h:</b> <i>{changes24h['SOL']}%</i>"
    return messageStats_text

def get_messageStatsFull(data):
    nameCrypto = data['nameCrypto']
    
    r = requests.get(f'https://min-api.cryptocompare.com/data/pricemultifull?fsyms={nameCrypto}&tsyms=USD')
    json_data = r.json()

    fromsymbol = json_data["RAW"][nameCrypto]["USD"]["FROMSYMBOL"]
    market = json_data["RAW"][nameCrypto]["USD"]["MARKET"]
    price = json_data["RAW"][nameCrypto]["USD"]["PRICE"]
    change24h = json_data["RAW"][nameCrypto]["USD"]["CHANGEPCT24HOUR"]
    
    messageStatsFull_text = f'<b>–ì—Ä–∞—Ñ–∏–∫ –∑–∞ 7 –¥–Ω–µ–π</b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{fromsymbol}\n<b>–ú–∞—Ä–∫–µ—Ç: </b>{market}\n<b>–¶–µ–Ω–∞: </b>{round(price, 2)}$\n<b>24—á: </b>{change24h}'
    return messageStatsFull_text